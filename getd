#! /usr/bin/env python

import traviSQL,datetime,getopt,sys,ldapClass,re
from pprint import pprint

mindate = datetime.datetime(datetime.MINYEAR, 1, 1)

def get_empty_db():
    '''
    This function returns Full and empty databases, respectively
    '''
    alldb = []
    fulldb = []
    db = traviSQL.getcon(dbase='information_schema')
    c = db.cursor()

    c.execute("SHOW DATABASES")
    for i in c.fetchall():
        alldb.append(i[0])

    c.execute("SELECT DISTINCT table_schema FROM tables")
    for i in c.fetchall():
        fulldb.append(i[0])
    c.close()

    return list(set(alldb)-set(fulldb)),fulldb


def get_empty_db_no_users(emptyDB):
    '''
    This Function returns empty databases with out user associate with them (I.E. the User field is blank)
    '''
    results = {}
    db = traviSQL.getcon(dbase='mysql')
    c = db.cursor()

    for i in emptyDB:
        c.execute("SELECT User FROM db WHERE Db = %s",i)
        results[i] = c.fetchall()

    c.close()
    print "Empty databases without users:"
    for i in results:
        if not results[i]:
            print '\t',i


def sorted_by_update_time():
    '''
    Returns a dictionary of databases and the newest last updated table date
    '''

    result = {}
    none_update = []

    db = traviSQL.getcon(dbase='information_schema')
    c = db.cursor()

    c.execute("SELECT DISTINCT table_schema,update_time FROM tables ORDER BY table_schema,update_time DESC")

    for i in c.fetchall():
        if result.get(i[0]):
            if i[1]:
                if result[i[0]] < i[1]:
                    result[i[0]] = i[1]
        else:
            result[i[0]] = i[1]
    

    for i in result:
        if result[i] == None:
            none_update.append(i)

    result = result.items()
    return result
    #return sorted(result, key=lambda x: x[1] or mindate,reverse=True )

def get_db_sizes(databases=None):
    '''
    Function returns a list of all databases and the size on disk
    '''

    db = traviSQL.getcon(dbase='information_schema')
    c = db.cursor()

    if databases:
        results = []
        for i in databases:
            c.execute('''SELECT table_schema 'database',
                         round( sum( data_length + index_length ) / ( 1024 *1024 ) , 2 ) size
                         FROM information_schema.TABLES
                         WHERE table_schema=%s''',[i])
            results.append(c.fetchall())
    else:
        c.execute('''SELECT table_schema 'database', 
                     round( sum( data_length + index_length ) / ( 1024 *1024 ) , 2 ) size 
                     FROM information_schema.TABLES 
                     GROUP BY table_schema''')

        results = c.fetchall()
    return results
    #return sorted(results, key=lambda x : float(x[1].strip('M')), reverse=True)

def get_small_size_db():
    '''
    Function that retrieves all databases smaller than 0.1MB on disk 
    and with a newest update time of less than a year ago
    '''

    db = traviSQL.getcon(dbase="information_schema")
    c  = db.cursor()

    c.execute('''SELECT sbdatabase,sbsize,sbupdate_time
                    FROM
                        (SELECT table_schema AS sbdatabase,
                         round( sum( data_length + index_length ) / ( 1024 *1024 ) , 2 ) AS sbsize,
                         max(update_time) AS sbupdate_time
                         FROM tables
                         GROUP BY table_schema) 
                    AS sb  
                    WHERE sbsize <= 0.1 AND sbupdate_time < '2010-01-01 00:00:01' ''')

    return c.fetchall()


def get_empty_db_users(emptyDB):

    results = []

    db = traviSQL.getcon(dbase='mysql')
    c  = db.cursor()

    for i in emptyDB:
        c.execute("SELECT User from db where db =%s", [i])
        results.append((i,c.fetchall()))

    for i in results:
        if i[1]:
            for user in i[1]:
                yield user[0]

def get_empty_users_only_empty_db(emptyDBusers,emptyDB):

    db = traviSQL.getcon(dbase='mysql')
    c  = db.cursor()

    for user in emptyDBusers:
        c.execute("SELECT db FROM db WHERE user = %s", [user])
        db_of_user = c.fetchall()
        users_dbs = []

        for item in db_of_user:
            users_dbs.append(item[0])

        intersection = set(users_dbs).intersection(set(emptyDB))
        difference = set(users_dbs).difference(set(emptyDB))

        if intersection and not difference:
            yield user

def get_dbs(like,likeor=None):
    db = traviSQL.getcon(dbase='information_schema')
    c  = db.cursor()

    if likeor:
        c.execute("select distinct table_schema from tables where table_name like %s OR %s",[like,likeor])
    else:
        c.execute("select distinct table_schema from tables where table_name like %s",[like])
    results = c.fetchall()

    for i in results:
        yield i[0]

def get_no_ldap_users():

    pat = re.compile(r'\_|\-')
    db = traviSQL.getcon(dbase='mysql')
    c  = db.cursor()

    c.execute("SELECT distinct user from user")

    users = c.fetchall()

    for user in users:
        if not pat.search(user[0]):
            if user[0].count('') < 10:
                if not ldapClass.ldap_search('ldap://ldap.oit.pdx.edu','ou=people,dc=pdx,dc=edu','uid='+user[0]):
                    print user[0]


def main():
    help_text='''--all-empty             : Lists all empty databases (where show tables returns nothing)
--all-by-update         : List all data bases and lists the update time of the last updated table
--all-by-size           : List all databases and gives size in MB
--all-by-update-size    : Combination of the previous two
--empty-db-users        : Finds all users of the empty databses
--no-ldap               : Finds users with no ldap entry
--almost-empty-db       : Db with that are very small < .1 '''
    
    try:
        opts, args = getopt.getopt(sys.argv[1:],'',['help','all-empty','all-by-update','all-by-size','all-by-update-size','empty-db-users','no-ldap','almost-empty-db'])
    except:
        print 'Option not recognized.  Try one of the following:'
        print help_text
        sys.exit(0)
    if not opts:
        print help_text
        sys.exit(0)

    for o, a in opts:
        if  o == '--all-empty':
            emptyDB,fulldb = get_empty_db()
        
            for i in emptyDB:
                print i

        elif o == '--all-by-update':
            results = sorted_by_update_time()
            results = sorted(results, key=lambda x: x[1] or mindate,reverse=True )
            print 'Database\t\t\tLast Updated\n'
            for i in results:
                counter = 0 
                for c in i[0]:
                    counter += 1 
                if counter > 15:
                    print i[0],'\t\t',i[1]
                elif counter < 7:
                    print i[0],'\t\t\t\t',i[1]
                else:
                    print i[0],'\t\t\t',i[1]
        elif o == '--all-by-size':
            sizes = get_db_sizes()
            sizes = sorted(sizes, key=lambda x : float(x[1]), reverse=True)

            for i in sizes:
                print i

        elif o == '--all-by-update-size':
            combined_list = []
            dates = sorted_by_update_time()
            sizes = get_db_sizes()
            joomla_dbs = list(get_dbs('%core_log%'))
            drupal_dbs = list(get_dbs('%node_access','node_access'))
            wp_dbs     = list(get_dbs('wp_users'))

            dates = sorted(dates, key=lambda x : x[0])
            sizes = sorted(sizes, key=lambda x : x[0])
            for i,j in zip(dates,sizes):
                if i[1] == None and j[1] == None:
                    combined_list.append((i[0],mindate,0.0))
                    continue
                elif i[1] == None:
                    combined_list.append((i[0],mindate,j[1]))
                    continue
                elif j[1] == None:
                    combined_list.append((i[0],i[1],0.0))
                    continue
                else:
                    combined_list.append((i[0],i[1],j[1]))
            combined_list = sorted(combined_list,key=lambda x : float(x[2]),reverse=True)

            for i in combined_list:
                if i[1]:
                    date = i[1].timetuple()
                    if i[0] in joomla_dbs and i[0] in drupal_dbs:
                        print i[0],',',str(date[0])+'-'+str(date[1])+'-'+str(date[2]),',',i[2],',','joomla/drupal'
                    elif i[0] in joomla_dbs and i[0] in wp_dbs:
                        print i[0],',',str(date[0])+'-'+str(date[1])+'-'+str(date[2]),',',i[2],',','joomla/wordpress'
                    elif i[0] in drupal_dbs and i[0] in wp_dbs:
                        print i[0],',',str(date[0])+'-'+str(date[1])+'-'+str(date[2]),',',i[2],',','drupal/wordpress'
                    elif i[0] in joomla_dbs:
                        print i[0],',',str(date[0])+'-'+str(date[1])+'-'+str(date[2]),',',i[2],',','joomla'
                    elif i[0] in drupal_dbs:
                        print i[0],',',str(date[0])+'-'+str(date[1])+'-'+str(date[2]),',',i[2],',','drupal'
                    elif i[0] in wp_dbs:
                        print i[0],',',str(date[0])+'-'+str(date[1])+'-'+str(date[2]),',',i[2],',','wordpress'
                    else:
                        print i[0],',',str(date[0])+'-'+str(date[1])+'-'+str(date[2]),',',i[2],',','not detected'

                else:
                    print i[0],',','0000-00-00',',',i[2]
            
        elif o == '--empty-db-users':
            emptyDB,fulldb = get_empty_db()
            users_of_empty_db = list(get_empty_db_users(emptyDB))

            only_empty_db_users = list(get_empty_users_only_empty_db(users_of_empty_db,emptyDB))

            for user in only_empty_db_users:
                print user
            print "\n"
            print "DATABASES"
            for database in emptyDB:
                print database
        elif o == '--no-ldap':
            get_no_ldap_users()

        elif o == '--almost-empty-db':
            results = get_small_size_db()
            dbs = []
            for row in results:
                print row[0],',',row[1],',',row[2]
                dbs.append(row[0])
            users_of_dbs = list(get_empty_db_users(dbs))
            only_users_of_dbs = list(get_empty_users_only_empty_db(users_of_dbs,dbs))
            print "\nUsers"
            for user in only_users_of_dbs:
                print user

        elif o == '--help':
            print help_text

if __name__=='__main__':
    main()
